$font-primary: "Poppins", sans-serif;
$font-titleBar: "Montserrat", sans-serif;

$nav-background-color: #fff;
$header-background-color: #E6223D;

$primary-color: #E30021;
$secondary-color: #000;

$text-base-color: #1D1E44;
$text-secondary-color: #111114;
$textAlt: #626B7E;

$primary-link-color: $primary-color;
$secondary-link-color: $secondary-color;

$price-color: $text-secondary-color ;

$border-color: #E5E9F1 ;

$btn-comprar-color: #2AC905 ;

$star-color: #FC0 ;

$star-empty-color: #E0E0E8;

/*Social colors*/
$facebook: #3b5998;
$twitter: #00b6f1;
$youtube: #ff0000;
$instagrammagenta: #c32aa3;
$instagramblue: #4c5fd7;
$instagrampurple: #7232bd;
$instagramorange: #f46f30;
$instagramyellow: #ffdc7d;
$pinterest: #cb2027;
$googleplus: #df4a32;
$linkedin: #007bb6;
$snapchat: #fffc00;
$whatsappgreen: #25d366;
$whatsappteal1: #075e54;
$whatsappteal2: #128c7e;
$skypeblue: #00aff0;
$skypegreen: #7fba00;
$android: #a4c639;
$soundcloud: #ff5500;
$spotifygreen: #1ed760;
$spotifydarkgreen: #1db954;

// Tamanho do container
$grid-max: 1322px;

// media query para responsivo direto do seletor do elemento
@mixin mobileview {
	@media only screen and (max-width: 769px) {
		@content;
	}
}

// media query para dispositivos de tela pequena direto do seletor do elemento
@mixin smallmobileview {
	@media only screen and (max-width: 360px) {
		@content;
	}
}

// media query para desktop direto do seletor do elemento
@mixin desktopview {
	@media screen and (min-width: 770px) {
		@content;
	}
}

// media query para tablet direto do seletor do elemento
@mixin tabletview {
	@media screen and (max-width: $grid-max) and (min-width: 770px) {
		@content;
	}
}
@mixin notebookview {
	@media only screen and (max-width: 1441px) {
		@content;
	}
}
%full {
	float: left;
	width: 100%;
	clear: both;
	&:after {
		content: '';
		display: table;
		line-height: 0;
		clear: both;
	}
}

@mixin css3-prefix($property, $value) {
	-webkit-#{$property}: #{$value};
	-khtml-#{$property}: #{$value};
	-moz-#{$property}: #{$value};
	-ms-#{$property}: #{$value};
	-o-#{$property}: #{$value};
	#{$property}: #{$value};
}

// Box Sizing (border-box -- content-box)
// --------------------------------------
@mixin box-sizing($arg) {
	@include css3-prefix("box-sizing", $arg);
}

// Grid System
// -----------
// Espaçamento entre as colunas
$grid-gutter: 15px;

// Quantidade de colunas
$grid-columns: 12;

// Código básico das colunas do grid
[class*="grid12-"] {
	position: relative;
	float: left;
	width: 100%;
	margin: 0;
	padding: 0;
}

@include desktopview {
	
}


@mixin linearGradient($top, $bottom) {
	background: $top;
	background: -moz-linear-gradient(top, $top 0%, $bottom 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $top), color-stop(100%, $bottom));
	background: -webkit-linear-gradient(top, $top 0%, $bottom 100%);
	background: -o-linear-gradient(top, $top 0%, $bottom 100%);
	background: -ms-linear-gradient(top, $top 0%, $bottom 100%);
	background: linear-gradient(to bottom, $top 0%, $bottom 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$top}', endColorstr='#{$bottom}',GradientType=0 );
}

@mixin opacity($opacity) {
	opacity: $opacity;

	$opacity-ie: $opacity * 100;

	filter: alpha(opacity = $opacity-ie);
}

@mixin transition($args...) {
	@include css3-prefix("transition", $args);
}

@mixin border-radius($size...) {
	@include css3-prefix("border-radius", $size);
}

@mixin box-shadow($args...) {
	@include css3-prefix("box-shadow", $args);
}

// generic transform
@mixin transform($transforms) {
	@include css3-prefix("transform", $transforms);
}

// rotate
@mixin rotate($deg) {
	@include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
	@include transform(scale($scale));
}

// translate
@mixin translate($x, $y) {
	@include transform(translate($x, $y));
}

// skew
@mixin skew($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

// Flip
@mixin flip($scaleX: -1) {
	@include css3-prefix("transform", scaleX($scaleX));

	filter: FlipH;
	-ms-filter: "FlipH";
}

// animation
@mixin animation($args...) {
	@include css3-prefix("animation", $args);
}

@mixin animation-keyframes {
	$animation-name: unique-id();

	animation-name: $animation-name;

	@keyframes #{$animation-name} {
		@content;
	}
}

// origin
@mixin transform-origin($args...) {
	@include css3-prefix("transform-origin", $args);
}

// cria seta sólida
// POSIÇÕES PODEM SER: cima, baixo, direita, esquerda
// baseado em:  https://gist.github.com/mynameispj/5383706
@mixin triangle($cor: #000, $tamanho: 5px, $direcao: "cima") {
	content: '';
	width: 0;
	height: 0;

	@if $direcao == "cima" {
		border-right: $tamanho solid transparent;
		border-left: $tamanho solid transparent;
		border-bottom: $tamanho solid $cor;
	}

	@if $direcao == "baixo" {
		border-right: $tamanho solid transparent;
		border-left: $tamanho solid transparent;
		border-top: $tamanho solid $cor;
	}

	@if $direcao == "direita" {
		border-top: $tamanho solid transparent;
		border-bottom: $tamanho solid transparent;
		border-left: $tamanho solid $cor;
	}

	@if $direcao == "esquerda" {
		border-top: $tamanho solid transparent;
		border-bottom: $tamanho solid transparent;
		border-right: $tamanho solid $cor;
	}
}

// cria seta com bordas
// POSIÇÕES PODEM SER: norte, nordeste, leste, sudeste, sul, sudoeste, oeste
// baseado em: https://github.com/brbcoding/CSS-Shapes/blob/master/UI%20Components/arrow-mixin.scss
// $grossura: grossura da borda da seta    ||    $tamanho: tamanho total da seta
@mixin arrow($cor, $direcao: leste, $grossura: 4px, $tamanho: 10px) {
	content: '';
	display: inline-block;
	border-top: $grossura solid $cor;
	border-left: $grossura solid $cor;
	height: $tamanho;
	width: $tamanho;

	@if $direcao == "norte" {
		@include transform(rotate(45deg));
	}
	@else if $direcao == "nordeste" {
		@include transform(rotate(90deg));
	}
	@else if $direcao == "leste" {
		@include transform(rotate(135deg));
	}
	@else if $direcao == "sudeste" {
		@include transform(rotate(180deg));
	}
	@else if $direcao == "sul" {
		@include transform(rotate(225deg));
	}
	@else if $direcao == "sudoeste" {
		@include transform(rotate(270deg));
	}
	@else if $direcao == "oeste" {
		@include transform(rotate(315deg));
	}
}

// cor de fonte placeholder
@mixin placeholder($color) {
	&::-webkit-input-placeholder {
		color: $color;
	}

	&:-moz-placeholder {
		color: $color;
	}

	&::-moz-placeholder {
		color: $color;
	}

	&:-ms-input-placeholder {
		color: $color;
	}
}

@mixin grayscale($toggle: "on", $percentage: 1) {
	$svg-type: "matrix";
	$svg-value: "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0";
	$ie-alpha: alpha(#{"opacity="}round($percentage * 100));

	@if $percentage != 1 {
		$svg-type: "saturate";
		$svg-value: $percentage;
	}

	@if $toggle == "on" {
		filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='#{$svg-type}' values='#{$svg-value}'/></filter></svg>#grayscale");

		// Firefox 10+, Firefox on Android
		filter: gray $ie-alpha;

		// IE6-9
		-webkit-filter: grayscale(round($percentage * 100%));

		// Chrome 19+, Safari 6+, Safari 6+ iOS
		filter: grayscale(round($percentage * 100%));

		// Catch-all
	}

	@if $toggle == "off" {
		@if $svg-type == "saturate" {
			filter: none;
		}
		@else {
			filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale");
		}

		-webkit-filter: grayscale(0%);
		filter: grayscale(0);
	}
}

@mixin user-select($args...) {
	-webkit-touch-callout: $args;

	@include css3-prefix("user-select", $args);
}

@mixin appearance($args...) {
	@include css3-prefix("appearance", $args);
}

@mixin background-size($value) {
	@include css3-prefix("background-size", $value);
}

// Margin - Padding
// ----------------
@for $i from 1 through 100 {
	$step: $i * 1;

	.mt#{$step} {
		margin-top: #{$step * 1}px !important;
	}

	.ml#{$step} {
		margin-left: #{$step * 1}px !important;
	}

	.mr#{$step} {
		margin-right: #{$step * 1}px !important;
	}

	.mb#{$step} {
		margin-bottom: #{$step * 1}px !important;
	}
}

@for $i from 1 through 100 {
	$step: $i * 1;

	.pt#{$step} {
		padding-top: #{$step * 1}px !important;
	}

	.pl#{$step} {
		padding-left: #{$step * 1}px !important;
	}

	.pr#{$step} {
		padding-right: #{$step * 1}px !important;
	}

	.pb#{$step} {
		padding-bottom: #{$step * 1}px !important;
	}
}

@for $i from 1 through 100 {
	$step: $i * 1;

	.m#{$step} {
		margin: #{$step * 1}px !important;
	}
}

@for $i from 1 through 100 {
	$step: $i * 1;

	.p#{$step} {
		padding: #{$step * 1}px !important;
	}
}

// Links Colors
// ------------
@mixin linkColor($link, $hover) {
	color: $link;

	&:hover {
		color: $hover;
	}
}

// Advanced positioning
// --------------------
$position-default: null !default;

@mixin position($type, $top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {
	position: $type;

	$allowed_types: absolute relative fixed;

	@if not index($allowed_types, $type) {
		@warn "Unknown position: #{$type}.";
	}

	@each $data in top $top, right $right, bottom $bottom, left $left {
		#{nth($data, 1)}: nth($data, 2);
	}
}

@mixin absolute($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {
	@include position(absolute, $top, $right, $bottom, $left);
}

@mixin relative($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {
	@include position(relative, $top, $right, $bottom, $left);
}

@mixin fixed($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {
	@include position(fixed, $top, $right, $bottom, $left);
}

@mixin pushauto {
	margin-right: auto;
	margin-left: auto;
}

%pushauto {
	@include pushauto;
}

// Absolute Centering
// ------------------
@mixin absolutecenter($axis: "both") {
	position: absolute;

	@if $axis == "y" {
		top: 50%;

		@include transform(translateY(-50%));
	}

	@if $axis == "x" {
		left: 50%;

		@include transform(translateX(-50%));
	}

	@if $axis == "both" {
		top: 50%;
		left: 50%;

		@include transform(translate(-50%, -50%));
	}
}

// Sizing
// ------
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}
@mixin efects-underline($color) {
	&:after {
		content: "";
		position: absolute;
		left: 50%;
		right: 50%;
		bottom: 0;
		background: $color;
		height: 0;
		@include transition(all 300ms ease);
	}
	&:hover:after {
		left: 0;
		right: 0;
		height: 1px;
	}
}
// Hover open Navigations
// ----------------------
%navClosed {
	overflow: hidden;
	transform-origin: top;
	height: 0;

	@include transform(scaleY(0));
	@include opacity(0);
	@include transition(all 300ms ease);
}

%navOpened {
	overflow: inherit;
	height: auto;

	@include transform(scaleY(1));
	@include opacity(1);
	@include transition(all 300ms ease);
}